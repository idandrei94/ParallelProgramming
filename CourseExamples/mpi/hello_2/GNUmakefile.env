# Determines the operating system and processor architecture of the
# platform and sets the following variables appropriately.
#
# MYOS		    current operating system
#		      (at the moment Cygwin, Darwin, or Linux)
# MYARCH	    current processor architecture
#		      (at the moment always "x86_64")
# USE_CC	    selected / used C compiler
#		      (important for default compiler for "mpicc")
# USE_CC_3	    first 3 characters of USE_CC
#		      (important for "Darwin" where "gcc" is a link to
#		      "clang", while GNU C is "gcc-mp-7", "gcc-7" or
#		      something similar)
# USE_CFLAGS	    favoured / necessary common CFLAGS
# USE_LDFLAGS	    favoured / necessary common LDFLAGS
# AUTOPAR_CFLAGS    CFLAGS to enable automatic parallelization
# OPENACC_CFLAGS    CFLAGS to enable OpenACC
# OPENMP_CFLAGS	    CFLAGS to enable OpenMP
# OPENMP_ACC_CFLAGS CFLAGS to enable OpenMP for accelerators
# CUDA_CAPABLE	    yes / no
# GSL_CAPABLE	    yes / no
# OPENCL_CAPABLE    yes / no
# PTHREAD_CAPABLE   yes / no
# SUNPERF_CAPABLE   yes / no
# MPICC_CMD	    yes / no
#
# "*_CFLAGS" don't contain a flag for the kind of optimization (could
# result in a fatal error for "nvcc") and "USE_CFLAGS" doesn't contain
# a flag for the C standard for "clang" (could result in an error if
# you want to compile CUDA programs with "clang").
#
#
# The environment variables LD_LIBRARY_PATH / DYLD_LIBRARY_PATH and
# C_INCL_PATH are evaluated to determine "-L" and "-I" command line
# arguments for the compiler.
#
#
# You can use something like the following statement
#   $(warning CC = $(CC))
# if you want to print messages or values of (environment) variables
# on the screen to make debugging easier if something went wrong.
#
# You can also use the command line arguments "-d" (make -d ...) if
# you want to observe what "make" is doing.
#
# This file can only be used with "GNU make" (gmake), because it
# contains conditional statements and other "GNU make" specific
# stuff. If you don't have "GNU make" add a comment char in front
# of all unnecessary lines.
#
# If you want to support different compilers, operating systems,
# and/or processor architectures, you can create one "Makefile" for
# each compiler/platform or you can use "GNUmakefile" and conditional
# expressions. It's much simpler to use GNUmakefile if you have to
# support different compilers and different platforms. You can
# determine most of your environment automatically using UNIX commands
# which can be executed in GNUmakefile via the "shell" function of
# "GNU make".
#
# This file supports the following compilers and systems for 64-bit
# binaries:
#
#  GNU C compiler gcc-7.1.0 or newer (gcc, Mac OS: gcc-mp-7, gcc-7, ...)
#  Intel Parallel Studio XE 2017 or newer (icc)
#  LLVM compiler infrastructure 5.0 or newer (clang)
#  MPI wrapper compiler (mpicc)
#  NVIDIA CUDA 8.0 SDK or newer (nvcc)
#  Oracle Developer Studio 12.5 or newer (cc)
#  Portland Group Community Edition 2016 or newer (pgcc)
#
#  Cygwin x86_64
#  Darwin x86_64 (Mac OS X)
#  Linux x86_64
#
#
# Darwin (Apple Mac OS X) uses "dyld" so that you have to set
# "DYLD_LIBRARY_PATH" in an appropriate way if the dynamic loader
# doesn't find a shared library.
#
# Depending on the compiler, which had been used to compile the MPI
# package, the wrapper compiler "mpicc" uses "gcc", "cc", ... as
# default compiler.
#
#
# File: GNUmakefile.env			Author: S. Gross
# Date: 10.09.2017
#


# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !!!                        Don't change                             !!!
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# You must modify this file only, if you port it to a new operating
# system or processor architecture or if you want to use a different
# compiler. You probably have to modify it as well (e.g. adding new
# command line arguments to CFLAGS), if you install a new version of
# an operating system or compiler.
#
#
# **********  determine environment  **********
#
# It's not allowed to add a comment after the next statement or
# similar statements! Otherwise everything between the value and
# the comment character is part of the variable so that comparisons
# with the variable will normally fail in that case!
#
MYOS = $(shell uname -s | cut -d _ -f 1)
ifeq ($(MYOS), CYGWIN)
  MYOS = $(shell uname -o)
endif

MYARCH = $(shell uname -m)
ifneq ($(MYARCH), x86_64)
  $(warning )
  $(error Unsupported processor architecture "$(MYARCH)")
endif


# Intel MPI provides the shell scripts "mpicc", "mpigcc", and "mpiicc"
#
MPICC_CMD = no
ifeq ($(CC), mpicc)
  MPICC_CMD = yes
endif
ifeq ($(CC), mpigcc)
  MPICC_CMD = yes
endif
ifeq ($(CC), mpiicc)
  MPICC_CMD = yes
endif

# necessary to determine the default compiler for MPI
#
USE_CC = $(CC)

# **********  determine default compiler for "mpicc"  **********
#
ifeq ($(MPICC_CMD), yes)
  # "mpicc -show" (MPICH, Open MPI) or "mpicc --showme" (not
  # available with MPICH) print the "default compiler" and the
  # command line arguments which are compiled into "mpicc".
  #
  MPICC_AVAIL = $(shell which $(CC) 2>&1 | cut -d' ' -f1)
  # possible error message using Linux:
  #   which: no mpicc in <list of directories from $(PATH)>
  # possible error message using Cygwin or Darwin:
  #   mpicc: Command not found.
  ifeq ($(MPICC_AVAIL), which:)
    $(error $(CC) not available or not activated in $(HOME)/.cshrc)
  endif
  ifeq ($(MPICC_AVAIL), mpicc:)
    $(error $(CC) not available or not activated in $(HOME)/.cshrc)
  endif

  # use default compiler (cc, gcc, ...) which was used to compile the
  # package
  USE_CC = $(shell $(CC) -show | cut -d' ' -f1)
endif

# **********  is the selected compiler available?  **********
#
CC_AVAIL = $(shell which $(USE_CC) 2>&1 | cut -d' ' -f1)
# possible error message for "tcsh" shell:
#   "clang: Command not found."
# possible error message for "bash" shell:
#   "which: no clang in ..." or empty message
ifeq ($(CC_AVAIL), $(USE_CC):)
  $(error $(USE_CC) not available or not activated in $(HOME)/.cshrc)
endif
ifeq ($(CC_AVAIL), which:)
  $(error $(USE_CC) not available or not activated in $(HOME)/.cshrc)
endif
ifeq ($(CC_AVAIL),)
  $(error $(USE_CC) not available or not activated in $(HOME)/.cshrc)
endif


# "Darwin" needs "gcc-mp-7", "gcc-7", ... for OpenMP, ...
#
# Use only the first three characters of the compiler name to
# avoid all flavors of a compiler name when determining necessary
# command line arguments for the compiler.
#
USE_CC_3 = $(shell echo $(USE_CC) | cut -c 1-3)


# **********  determine include and library directories  **********
#
ifneq ($(C_INCL_PATH),)
  I_DIRS = -I$(shell echo ${C_INCL_PATH} | sed 's/:/ -I/g')
else
  I_DIRS =
endif

ifneq ($(MYOS), Darwin)
  ifneq ($(LD_LIBRARY_PATH),)
    L_DIRS = -L$(shell echo ${LD_LIBRARY_PATH} | sed 's/:/ -L/g')
  else
    L_DIRS = 
  endif
else
  ifneq ($(DYLD_LIBRARY_PATH),)
    L_DIRS = -L$(shell echo ${DYLD_LIBRARY_PATH} | sed 's/:/ -L/g')
  else
    L_DIRS = 
  endif
endif


# **********  set compiler flags  **********
#
# Set default command line arguments for "clang". "-std=c11" is not
# allowed if you want to compile CUDA programs (would result in an
# error message "invalid argument '-std=c11' not allowed with 'CUDA'").
#
# Switch off warnings about unused command line arguments with
# "-Wno-unused-command-line-argument" (otherwise you would get
# warnings for unused "-I" and "-L" arguments).
#
CLANG_CFLAGS  = -m64 -Weverything -Wno-unused-command-line-argument
CLANG_CFLAGS += -D${MYOS} -D${MYARCH} ${I_DIRS} ${L_DIRS}

# Set default command line arguments for "GNU C".
#
GCC_CFLAGS  = -std=c11 -m64
GCC_CFLAGS += -fstrict-overflow -fstrict-aliasing
GCC_CFLAGS += -pedantic -Wall -Wextra -Wformat=2
GCC_CFLAGS += -Wfloat-equal -Wdeclaration-after-statement
GCC_CFLAGS += -Wswitch-enum -Wswitch-default
GCC_CFLAGS += -Wbad-function-cast -Wcast-qual
GCC_CFLAGS += -Wstrict-prototypes -Wmissing-prototypes
GCC_CFLAGS += -Wmissing-include-dirs -Wunused
GCC_CFLAGS += -Wunsafe-loop-optimizations
GCC_CFLAGS += -Wmissing-declarations -Wredundant-decls
GCC_CFLAGS += -Wnested-externs -Winvalid-pch
GCC_CFLAGS += -Wlogical-op -Wunused-but-set-variable
GCC_CFLAGS += -Wunused-local-typedefs
GCC_CFLAGS += -D${MYOS} -D${MYARCH} ${I_DIRS} ${L_DIRS}

# Set default command line arguments for "SUN C".
#
SUN_CC_CFLAGS  = -std=c11 -m64 -fd -v
SUN_CC_CFLAGS += -D${MYOS} -D${MYARCH} ${I_DIRS} ${L_DIRS}


ifeq ($(USE_CC), cc)
  ifeq ($(MYOS), Linux)
    # Oracle Developer Studio C Compiler. CUDA, OpenACC, and OpenMP
    # for accelerators are not supported.
    USE_CFLAGS	      = $(SUN_CC_CFLAGS)
    AUTOPAR_CFLAGS    = -xautopar -xreduction
    OPENACC_CFLAGS    = 
    OPENMP_CFLAGS     = -xopenmp
    OPENMP_ACC_CFLAGS =
    CUDA_CAPABLE      = no
    GSL_CAPABLE	      = yes
    OPENCL_CAPABLE    = yes
    PTHREAD_CAPABLE   = yes
    SUNPERF_CAPABLE   = yes
    USE_LDFLAGS       = -m64
  else
    ifeq ($(MYOS), Cygwin)
      # Link to "gcc". CUDA, OpenACC, OpenCL, and OpenMP for
      # accelerators are not supported.
      USE_CFLAGS	= $(GCC_CFLAGS)
      AUTOPAR_CFLAGS	= -floop-parallelize-all
      AUTOPAR_CFLAGS	+= -ftree-parallelize-loops=8
      OPENACC_CFLAGS	= 
      OPENMP_CFLAGS	= -fopenmp
      OPENMP_ACC_CFLAGS = 
      CUDA_CAPABLE      = no
      GSL_CAPABLE       = yes
      OPENCL_CAPABLE    = no
      PTHREAD_CAPABLE   = yes
      SUNPERF_CAPABLE   = no
      USE_LDFLAGS	= -m64
    else
      ifeq ($(MYOS), Darwin)
	# Link to "clang". Automatic parallelization, CUDA, OpenACC,
	# and OpenMP for accelerators are not supported.
	USE_CFLAGS	  = $(CLANG_CFLAGS)
	AUTOPAR_CFLAGS	  = 
	OPENACC_CFLAGS	  = 
	OPENMP_CFLAGS	  = 
	OPENMP_ACC_CFLAGS = 
	CUDA_CAPABLE      = no
	GSL_CAPABLE       = no
	OPENCL_CAPABLE    = yes
	PTHREAD_CAPABLE   = yes
	SUNPERF_CAPABLE   = no
	USE_LDFLAGS	  = -m64
      else
	# Unsupported operating system. Don't know anything about "cc".
	USE_CFLAGS	  = 
	AUTOPAR_CFLAGS	  = 
	OPENACC_CFLAGS	  = 
	OPENMP_CFLAGS	  = 
	OPENMP_ACC_CFLAGS = 
	CUDA_CAPABLE      = 
	GSL_CAPABLE       = 
	OPENCL_CAPABLE    = 
	PTHREAD_CAPABLE   = 
	SUNPERF_CAPABLE   = 
	USE_LDFLAGS	  = 
      endif
    endif
  endif
endif


ifeq ($(USE_CC), clang)
  ifeq ($(MYOS), Linux)
    # OpenACC not supported.
    # "-std=c11" is not allowed if you want to compile CUDA programs
    # (would result in an error message "invalid argument '-std=c11'
    # not allowed with 'CUDA'").
    USE_CFLAGS	      = $(CLANG_CFLAGS)
    AUTOPAR_CFLAGS    = -mllvm -polly -mllvm -polly-parallel
    AUTOPAR_CFLAGS    += -mllvm -polly-vectorizer=stripmine
    OPENACC_CFLAGS    = 
    OPENMP_CFLAGS     = -fopenmp
    OPENMP_ACC_CFLAGS = -fopenmp
    CUDA_CAPABLE      = yes
    GSL_CAPABLE	      = yes
    OPENCL_CAPABLE    = yes
    PTHREAD_CAPABLE   = yes
    SUNPERF_CAPABLE   = no
    USE_LDFLAGS	      = -m64
  else
    ifeq ($(MYOS), Cygwin)
      # Automatic parallelization, CUDA, OpenACC, OpenCL, OpenMP,
      # and OpenMP for accelerators are not supported
      USE_CFLAGS	= $(CLANG_CFLAGS)
      AUTOPAR_CFLAGS    = 
      OPENACC_CFLAGS    = 
      OPENMP_CFLAGS     = 
      OPENMP_ACC_CFLAGS =
      CUDA_CAPABLE	= no
      GSL_CAPABLE       = yes
      OPENCL_CAPABLE	= no
      PTHREAD_CAPABLE	= yes
      SUNPERF_CAPABLE   = no
      USE_LDFLAGS	= -m64
    else
      ifeq ($(MYOS), Darwin)
	# Automatic parallelization, CUDA, OpenACC, and OpenMP
	# for accelerators not supported
	USE_CFLAGS	  = $(CLANG_CFLAGS)
	AUTOPAR_CFLAGS    = 
	OPENACC_CFLAGS    = 
	OPENMP_CFLAGS     = 
	OPENMP_ACC_CFLAGS =
	CUDA_CAPABLE	  = no
	GSL_CAPABLE       = no
	OPENCL_CAPABLE	  = yes
	PTHREAD_CAPABLE	  = yes
	SUNPERF_CAPABLE   = no
	USE_LDFLAGS	  = -m64
      else
	# Unsupported operating system. Don't know anything about "clang".
	USE_CFLAGS	  = 
	AUTOPAR_CFLAGS	  = 
	OPENACC_CFLAGS	  = 
	OPENMP_CFLAGS	  = 
	OPENMP_ACC_CFLAGS = 
	CUDA_CAPABLE      = 
	GSL_CAPABLE       = 
	OPENCL_CAPABLE    = 
	PTHREAD_CAPABLE   = 
	SUNPERF_CAPABLE   = 
	USE_LDFLAGS	  = 
      endif
    endif
  endif
endif


ifeq ($(USE_CC_3), gcc)
  ifeq ($(MYOS), Linux)
    # CUDA not supported.
    USE_CFLAGS	      = $(GCC_CFLAGS)
    AUTOPAR_CFLAGS    = -floop-parallelize-all -ftree-parallelize-loops=8
    OPENACC_CFLAGS    = -fopenacc
    OPENMP_CFLAGS     = -fopenmp
    OPENMP_ACC_CFLAGS = -fopenmp
    CUDA_CAPABLE      = no
    GSL_CAPABLE	      = yes
    OPENCL_CAPABLE    = yes
    PTHREAD_CAPABLE   = yes
    SUNPERF_CAPABLE   = no
    USE_LDFLAGS	      = -m64
  else
    ifeq ($(MYOS), Cygwin)
      # CUDA, OpenACC, OpenCL, and OpenMP for accelerators are
      # not supported.
      USE_CFLAGS	= $(GCC_CFLAGS)
      AUTOPAR_CFLAGS    = -floop-parallelize-all
      AUTOPAR_CFLAGS    += -ftree-parallelize-loops=8
      OPENACC_CFLAGS	= 
      OPENMP_CFLAGS	= -fopenmp
      OPENMP_ACC_CFLAGS = 
      CUDA_CAPABLE      = no
      GSL_CAPABLE       = yes
      OPENCL_CAPABLE    = no
      PTHREAD_CAPABLE   = yes
      SUNPERF_CAPABLE   = no
      USE_LDFLAGS	= -m64
    else
      ifeq ($(MYOS), Darwin)
	ifeq ($(CC), gcc)
	  # Link to "clang". Automatic parallelization, CUDA, OpenACC
	  # and OpenMP for accelerators are not supported.
	  USE_CFLAGS	    = $(CLANG_CFLAGS)
	  AUTOPAR_CFLAGS    = 
	  OPENACC_CFLAGS    = 
	  OPENMP_CFLAGS	    = 
	  OPENMP_ACC_CFLAGS = 
	  CUDA_CAPABLE      = no
	  GSL_CAPABLE       = no
	  OPENCL_CAPABLE    = yes
	  PTHREAD_CAPABLE   = yes
	  SUNPERF_CAPABLE   = no
	  USE_LDFLAGS	    = -m64
	else
	  # GNU C: gcc-mp-7, gcc-7, etc. CUDA and OpenMP for accelerators
	  # are not supported.
	  USE_CFLAGS	    = $(GCC_CFLAGS)
	  AUTOPAR_CFLAGS    = -floop-parallelize-all
	  AUTOPAR_CFLAGS    += -ftree-parallelize-loops=8
	  OPENACC_CFLAGS    = -fopenacc
	  OPENMP_CFLAGS	    = -fopenmp
	  OPENMP_ACC_CFLAGS = 
	  CUDA_CAPABLE      = no
	  GSL_CAPABLE       = no
	  OPENCL_CAPABLE    = yes
	  PTHREAD_CAPABLE   = yes
	  SUNPERF_CAPABLE   = no
	  USE_LDFLAGS	    = -m64
 	endif
      else
	# Unsupported operating system. Don't know anything about "gcc".
	USE_CFLAGS	  = 
	AUTOPAR_CFLAGS	  = 
	OPENACC_CFLAGS	  = 
	OPENMP_CFLAGS	  = 
	OPENMP_ACC_CFLAGS = 
	CUDA_CAPABLE      = 
	GSL_CAPABLE       = 
	OPENCL_CAPABLE    = 
	PTHREAD_CAPABLE   = 
	SUNPERF_CAPABLE   = 
	USE_LDFLAGS	  = 
      endif
    endif
  endif
endif


ifeq ($(USE_CC), icc)
  # CUDA, OpenACC and OpenMP for accelerators are not supported.
  USE_CFLAGS	    = -std=c11 -m64 -prec_div -w2 -Wall -Wcheck
  USE_CFLAGS	    += -D${MYOS} -D${MYARCH} ${I_DIRS} ${L_DIRS}
  AUTOPAR_CFLAGS    = -parallel
  OPENACC_CFLAGS    = 
  OPENMP_CFLAGS     = -qopenmp
  OPENMP_ACC_CFLAGS = 
  CUDA_CAPABLE      = no
  GSL_CAPABLE	    = yes
  OPENCL_CAPABLE    = yes
  PTHREAD_CAPABLE   = yes
  SUNPERF_CAPABLE   = no
  USE_LDFLAGS	    = -m64
endif


ifeq ($(USE_CC), nvcc)
  # Automatic parallelization, OpenACC, and OpenMP for accelerators
  # are not supported.
  #
  # "nvcc" complains with a fatal error if you duplicate a command
  # line argument, so that you would get the following error, if you
  # set "USE_LDFLAGS = -m64".
  #
  # nvcc fatal   : redefinition of argument 'machine'
  #
  ifeq ($(MYOS), Linux)
    # "nvcc" is part of the CUDA SDK for Linux and relies on "gcc".
    # Flags for "gcc" are necessary for OpenMP.
    USE_CFLAGS	      = -m64
    USE_CFLAGS	      += -D${MYOS} -D${MYARCH} ${I_DIRS} ${L_DIRS}
    AUTOPAR_CFLAGS    = 
    OPENACC_CFLAGS    = 
    OPENMP_CFLAGS     = -Xcompiler -fopenmp
    OPENMP_ACC_CFLAGS = 
    CUDA_CAPABLE      = yes
    GSL_CAPABLE	      = yes
    OPENCL_CAPABLE    = yes
    PTHREAD_CAPABLE   = yes
    SUNPERF_CAPABLE   = no
    USE_LDFLAGS	      = -Xlinker -lgomp
  else
    ifeq ($(MYOS), Cygwin)
      # "nvcc" is part of the CUDA SDK for Windows and relies on
      # Microsoft Visual Studio that doesn't support Pthreads and
      # doesn't know anything about the GNU Scientific Library.
      # Flags for "cl" are necessary for OpenMP.
      USE_CFLAGS	= -m64
      USE_CFLAGS	+= -D${MYOS} -D${MYARCH} ${I_DIRS} ${L_DIRS}
      AUTOPAR_CFLAGS    = 
      OPENACC_CFLAGS    = 
      OPENMP_CFLAGS     = 
      OPENMP_ACC_CFLAGS = 
      CUDA_CAPABLE      = yes
      GSL_CAPABLE	= no
      OPENCL_CAPABLE    = yes
      PTHREAD_CAPABLE   = no
      SUNPERF_CAPABLE   = no
      USE_LDFLAGS	= 
    else
      ifeq ($(MYOS), Darwin)
	# At the moment not available for Darwin
	USE_CFLAGS	  = 
	AUTOPAR_CFLAGS	  = 
	OPENACC_CFLAGS	  = 
	OPENMP_CFLAGS	  = 
	OPENMP_ACC_CFLAGS = 
	CUDA_CAPABLE      = 
	GSL_CAPABLE	  = yes
	OPENCL_CAPABLE    = 
	PTHREAD_CAPABLE   = 
	SUNPERF_CAPABLE   = 
	USE_LDFLAGS	  = 
      else
	# Unsupported operating system. Don't know anything about "nvcc".
	USE_CFLAGS	  = 
	AUTOPAR_CFLAGS	  = 
	OPENACC_CFLAGS	  = 
	OPENMP_CFLAGS	  = 
	OPENMP_ACC_CFLAGS = 
	CUDA_CAPABLE      = 
	GSL_CAPABLE	  = 
	OPENCL_CAPABLE    = 
	PTHREAD_CAPABLE   = 
	SUNPERF_CAPABLE   = 
	USE_LDFLAGS	  = 
      endif
    endif
  endif
endif


ifeq ($(USE_CC), pgcc)
  # CUDA and OpenMP for accelerators are not supported.
  USE_CFLAGS	    = -c11 -m64
  USE_CFLAGS	    += -D${MYOS} -D${MYARCH} ${I_DIRS} ${L_DIRS}
  AUTOPAR_CFLAGS    = -Mconcur=allcores
  OPENACC_CFLAGS    = -acc -ta=nvidia
  OPENMP_CFLAGS     = -mp=allcores
  OPENMP_ACC_CFLAGS = 
  CUDA_CAPABLE      = no
  GSL_CAPABLE	    = yes
  OPENCL_CAPABLE    = yes
  PTHREAD_CAPABLE   = yes
  SUNPERF_CAPABLE   = no
  USE_LDFLAGS	    = -m64
endif
